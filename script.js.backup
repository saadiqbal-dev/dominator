$(document).ready(function () {
  // Application State
  const app = {
    currentFilter: "all",
    isLoading: false,
    documentsCache: {},

    // Configuration
    config: {
      loadingDelay: 500,
      animationDuration: 300,
      apiEndpoint: "/api/documents", // Change to your actual endpoint
    },
  };

  // Sample data - Replace with actual API call
  const documentsData = {
    all: [
      {
        id: 1,
        image: "https://via.placeholder.com/328x465",
        title: "Installation Manual",
        bodyText: "Complete installation guide",
        category: "manual",
        downloadUrl: "#",
      },
      {
        id: 2,
        image: "https://via.placeholder.com/328x465",
        title: "User Manual",
        bodyText: "User instructions and safety",
        category: "manual",
        downloadUrl: "#",
      },
      {
        id: 3,
        image: "https://via.placeholder.com/328x465",
        title: "Maintenance Guide",
        bodyText: "Regular maintenance procedures",
        category: "manual",
        downloadUrl: "#",
      },
      {
        id: 4,
        image: "https://via.placeholder.com/328x465",
        title: "Troubleshooting",
        bodyText: "Common issues and solutions",
        category: "manual",
        downloadUrl: "#",
      },
      {
        id: 5,
        image: "https://via.placeholder.com/328x465",
        title: "Parts Catalog",
        bodyText: "Complete parts reference",
        category: "manual",
        downloadUrl: "#",
      },
      {
        id: 6,
        image: "https://via.placeholder.com/328x465",
        title: "Warranty Information",
        bodyText: "Terms and conditions",
        category: "manual",
        downloadUrl: "#",
      },
    ],
    "door-brochures": [
      {
        id: 7,
        image: "https://via.placeholder.com/328x465",
        title: "Classic Door Series",
        bodyText: "Traditional designs catalog",
        category: "door-brochures",
        downloadUrl: "#",
      },
      {
        id: 8,
        image: "https://via.placeholder.com/328x465",
        title: "Modern Door Collection",
        bodyText: "Contemporary style doors",
        category: "door-brochures",
        downloadUrl: "#",
      },
    ],
    "color-accessories": [
      {
        id: 9,
        image: "https://via.placeholder.com/328x465",
        title: "Color Options Guide",
        bodyText: "Available color selections",
        category: "color-accessories",
        downloadUrl: "#",
      },
      {
        id: 10,
        image: "https://via.placeholder.com/328x465",
        title: "Hardware Accessories",
        bodyText: "Handles and hardware options",
        category: "color-accessories",
        downloadUrl: "#",
      },
    ],
    "smart-phone": [
      {
        id: 11,
        image: "https://via.placeholder.com/328x465",
        title: "Smart Control Setup",
        bodyText: "Mobile app configuration",
        category: "smart-phone",
        downloadUrl: "#",
      },
      {
        id: 12,
        image: "https://via.placeholder.com/328x465",
        title: "WiFi Connection Guide",
        bodyText: "Network setup instructions",
        category: "smart-phone",
        downloadUrl: "#",
      },
    ],
    framing: [
      {
        id: 13,
        image: "https://via.placeholder.com/328x465",
        title: "Framing Specifications",
        bodyText: "Technical requirements",
        category: "framing",
        downloadUrl: "#",
      },
      {
        id: 14,
        image: "https://via.placeholder.com/328x465",
        title: "Structural Guidelines",
        bodyText: "Building code compliance",
        category: "framing",
        downloadUrl: "#",
      },
    ],
    opener: [
      {
        id: 15,
        image: "https://via.placeholder.com/328x465",
        title: "Opener Installation",
        bodyText: "Step-by-step setup guide",
        category: "opener",
        downloadUrl: "#",
      },
      {
        id: 16,
        image: "https://via.placeholder.com/328x465",
        title: "Remote Programming",
        bodyText: "Remote control setup",
        category: "opener",
        downloadUrl: "#",
      },
    ],
  };

  // DOM Elements
  const elements = {
    grid: $("#documentGrid"),
    loading: $(".loading-spinner"),
    noResults: $(".no-results"),
    badges: $(".filter-badge"),
  };

  // Document Renderer
  const DocumentRenderer = {
    createCard: function (doc) {
      const card = $("<div>", {
        class: "document-card",
        "data-id": doc.id,
        "data-category": doc.category,
      });

      const image = $("<div>", {
        class: "card-image",
        css: {
          "background-image": `url('${doc.image}')`,
        },
      });

      const title = $("<h3>", {
        class: "card-title",
        text: doc.title,
      });

      const bodyText = $("<p>", {
        class: "card-body-text",
        text: doc.bodyText,
      });

      card.append(image, title, bodyText);
      return card;
    },

    renderGrid: function (documents) {
      elements.grid.empty();

      if (documents.length === 0) {
        this.showNoResults();
        return;
      }

      documents.forEach((doc) => {
        const card = this.createCard(doc);
        elements.grid.append(card);
      });

      this.hideNoResults();
      elements.grid.fadeIn(app.config.animationDuration);
    },

    showLoading: function () {
      elements.grid.hide();
      elements.noResults.removeClass("active");
      elements.loading.addClass("active");
    },

    hideLoading: function () {
      elements.loading.removeClass("active");
    },

    showNoResults: function () {
      elements.noResults.addClass("active");
      elements.grid.hide();
    },

    hideNoResults: function () {
      elements.noResults.removeClass("active");
    },
  };

  // Filter Handler
  const FilterHandler = {
    applyFilter: function (filter) {
      if (app.isLoading) return;

      app.isLoading = true;
      app.currentFilter = filter;

      this.updateBadgeStates(filter);
      DocumentRenderer.showLoading();

      // Simulate API call with timeout
      setTimeout(() => {
        const documents = this.getFilteredDocuments(filter);
        DocumentRenderer.hideLoading();
        DocumentRenderer.renderGrid(documents);
        app.isLoading = false;
      }, app.config.loadingDelay);
    },

    getFilteredDocuments: function (filter) {
      if (filter === "all") {
        let allDocs = [];
        Object.values(documentsData).forEach((docs) => {
          allDocs = allDocs.concat(docs);
        });
        return allDocs;
      }
      return documentsData[filter] || [];
    },

    updateBadgeStates: function (activeFilter) {
      elements.badges.removeClass("active");
      elements.badges
        .filter(`[data-filter="${activeFilter}"]`)
        .addClass("active");
    },
  };

  // Event Handlers
  const EventHandlers = {
    init: function () {
      // Badge click handler
      elements.badges.on("click", function () {
        const filter = $(this).data("filter");
        FilterHandler.applyFilter(filter);
      });

      // Card click handler
      $(document).on("click", ".card-image", function (e) {
        e.stopPropagation();
        const card = $(this).closest(".document-card");
        EventHandlers.handleCardClick(card);
      });

      // Card hover effect
      $(document)
        .on("mouseenter", ".document-card", function () {
          $(this).addClass("hover");
        })
        .on("mouseleave", ".document-card", function () {
          $(this).removeClass("hover");
        });

      // Keyboard navigation
      $(document).on("keydown", function (e) {
        if (e.key === "Escape") {
          // Close any open modals or overlays
          EventHandlers.closeOverlays();
        }
      });

      // Window resize handler
      $(window).on(
        "resize",
        Utils.debounce(function () {
          EventHandlers.handleResize();
        }, 250)
      );
    },

    handleCardClick: function (card) {
      const docId = card.data("id");
      const doc = this.findDocumentById(docId);

      if (doc) {
        console.log("Opening document:", doc);
        // Implement your document viewer logic here
        this.openDocumentViewer(doc);
      }
    },

    findDocumentById: function (id) {
      for (let category in documentsData) {
        const found = documentsData[category].find((doc) => doc.id === id);
        if (found) return found;
      }
      return null;
    },

    openDocumentViewer: function (doc) {
      // Example implementation - replace with your actual viewer
      if (confirm(`Open "${doc.title}"?`)) {
        window.open(doc.downloadUrl, "_blank");
      }
    },

    closeOverlays: function () {
      // Implement closing logic for any overlays
      console.log("Closing overlays");
    },

    handleResize: function () {
      // Handle responsive adjustments
      const width = $(window).width();
      if (width < 768) {
        // Mobile adjustments
        console.log("Mobile view");
      } else if (width < 1400) {
        // Tablet adjustments
        console.log("Tablet view");
      } else {
        // Desktop adjustments
        console.log("Desktop view");
      }
    },
  };

  // Utility Functions
  const Utils = {
    debounce: function (func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },

    preloadImages: function (documents) {
      documents.forEach((doc) => {
        const img = new Image();
        img.src = doc.image;
      });
    },

    scrollToTop: function () {
      $("html, body").animate({ scrollTop: 0 }, 300);
    },
  };

  // API Handler (for production use)
  const API = {
    fetchDocuments: async function (filter) {
      try {
        const response = await $.ajax({
          url: app.config.apiEndpoint,
          method: "GET",
          data: { category: filter },
          dataType: "json",
        });
        return response.data || [];
      } catch (error) {
        console.error("API Error:", error);
        return [];
      }
    },
  };

  // Initialize Application
  function init() {
    EventHandlers.init();
    FilterHandler.applyFilter("all");

    // Preload images for better performance
    const allDocs = FilterHandler.getFilteredDocuments("all");
    Utils.preloadImages(allDocs);
  }

  // Start the application
  init();

  // Expose public methods if needed
  window.DocumentGallery = {
    refresh: function () {
      FilterHandler.applyFilter(app.currentFilter);
    },
    filter: function (category) {
      FilterHandler.applyFilter(category);
    },
    getState: function () {
      return {
        filter: app.currentFilter,
        isLoading: app.isLoading,
      };
    },
  };
});
